# @format

name: Publish Packages

on:
  push:
    branches:
      - main
      - beta

jobs:
  detect-and-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
    outputs:
      lowest-node: ${{ steps.set-lowest.outputs.lowest }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install dependencies
        run: npm install

      - name: Run tests
        id: test
        run: npm test
        continue-on-error: true

      - name: Set lowest passing Node version
        id: set-lowest
        if: ${{ steps.test.outcome == 'success' }}
        run: echo "lowest=${{ matrix.node }}" >> $GITHUB_OUTPUT

  build-and-publish:
    runs-on: ubuntu-latest
    needs: detect-and-build
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.detect-and-build.outputs.lowest-node }}

      - name: Install dependencies
        run: npm install

      - name: Build with tsup
        run: npx tsup

      - name: Check exports with arethetypeswrong
        run: npx @arethetypeswrong/cli --pack

      - name: Run Prettier
        run: npx prettier --write .

      - name: Update package.json engines and packageManager
        run: |
          npm pkg set "engines.node=>=${{ needs.detect-and-build.outputs.lowest-node }}"
          npm pkg set "packageManager=npm@$(npm -v)"

      - name: Commit updated package.json
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git commit -m "chore: update engines.node and packageManager" || echo "No changes"
          git push origin main || echo "Push failed, likely no changes"

      - name: Get package info
        id: pkg
        run: |
          echo "name=$(node -p "require('./package.json').name")" >> $GITHUB_OUTPUT
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Generate CHANGELOG from GitHub Release
        run: |
          mkdir -p documents
          TAG=v${{ steps.pkg.outputs.version }}
          RELEASE_NOTES=$(gh release view "$TAG" --repo "$GITHUB_REPOSITORY" --json body -q ".body" || echo "")
          # Ensure CHANGELOG.md exists even if release notes are empty
          echo "${RELEASE_NOTES:-}" > documents/CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_ACCESS_TOKEN }}

      - name: Generate docs
        run: |
          rm -rf typedoc_out
          mkdir -p typedoc_out
          npx typedoc --out typedoc_out src
          # Typedoc will include documents/CHANGELOG.md automatically

      - name: Configure npm for publishing
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_ACCESS_TOKEN }}" > ~/.npmrc

      - name: Publish to npmjs.org
        run: |
          if [ "${GITHUB_REF##*/}" = "beta" ]; then
            npm publish --tag beta --access public
          else
            npm publish --tag latest --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}

      - name: Configure npm for GitHub Packages
        run: |
          echo "@xernerx:registry=https://npm.pkg.github.com///npm.pkg.github.com/:_authToken=${XERNERX_ACCESS_TOKEN}" > ~/.npmrc

      - name: Publish to GitHub Packages
        if: false # disabled until scoped package is ready
        run: npm publish --registry=https://npm.pkg.github.com/ --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.XERNERX_ACCESS_TOKEN }}

      - name: Create GitHub Release
        id: gh-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.pkg.outputs.version }}
          name: ${{ steps.pkg.outputs.name }} v${{ steps.pkg.outputs.version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.XERNERX_ACCESS_TOKEN }}

      - name: Push docs to docs repo
        run: |
          git clone https://github.com/Xernerx/docs.git docs-repo
          cd docs-repo

          # Detect remote default branch
          default_branch=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
          git checkout $default_branch || git checkout -b $default_branch

          # Copy docs to versioned package folder
          mkdir -p packages/${{ steps.pkg.outputs.name }}/${{ steps.pkg.outputs.version }}
          cp -r ../typedoc_out/* packages/${{ steps.pkg.outputs.name }}/${{ steps.pkg.outputs.version }}/

          # Commit & push
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "docs: update for ${{ steps.pkg.outputs.name }}@${{ steps.pkg.outputs.version }}" || echo "No changes to commit"
          git push https://x-access-token:${{ secrets.XERNERX_ACCESS_TOKEN }}@github.com/Xernerx/docs.git $default_branch
